/**********************************************************************
map_api.js

$Comment: provides JavaScript for Google Mashup from geojson layer generated by maptune
$Source :map_api.js,v $

$InitialAuthor: guenter richter $
$InitialDate: 2009/12/05 $
$Author: guenter richter $
$Id:map_app.js 1 2009-12-05 10:30:35Z Guenter Richter $

Copyright (c) Guenter Richter
$Log:map_api.js,v $
**********************************************************************/

/** 
 * @fileoverview This file is the main JavaScript for Google Mashup from geojson layer data created by maptune
 *
 * @author Guenter Richter guenter.richter@maptune.com
 * @version 0.9
 */

var _TRACE = function(szMessage){
	if ( typeof(console) != "undefined"  && typeof(console.log) != "undefined"  ){
		console.log("_TRACE:"+szMessage);
	}
};

/**
 * define namespace maptune
 */

var maptune = window.maptune = window.maptune || {};
maptune.jsapi = maptune.jsapi || {};

// we need also the ixmaps namespace to import ixmaps map layer files 
var ixmaps = window.ixmaps = window.ixmaps || {};
ixmaps.jsapi = ixmaps.jsapi || {};

(function() {

var fNoMap = false;

/* ...................................................................* 
 *  global vars                                                       * 
 * ...................................................................*/ 

maptune.jsapi.fCheckLayer = false;
maptune.jsapi.fShowExpanded = false;
maptune.jsapi.resetTimeout = null;
maptune.jsapi.searchDelayTimeout = null;
maptune.jsapi.fShowInfoInList = false;
maptune.jsapi.fShowCollections = false;
maptune.jsapi.onFocus = false;
maptune.jsapi.mapParam = null;

maptune.jsapi.szLayerType = "Map";

/* ...................................................................* 
 *  local vars                                                       * 
 * ...................................................................*/ 

_TRACE("map_api loaded!");

var __map = null;
var __mapUp = null;

var __fShowInfoInList = false;
var __fShowLinkInList = false;
var __fShowTooltips = false;
var __szItemFilter = null;

var __resourceRoot = "";

/* ...................................................................* 
 *  read and parse URL parameter                                      * 
 * ...................................................................*/ 

function _mapapi_getResourceRoot() {
	if (document.URL.match(/http:/)){
		var url = document.URL.split("?")[0];
		var urlA = url.split("/");
		for ( var i=0; i<urlA.length-1; i++){
			__resourceRoot += urlA[i]+"/";
		}
	}else{
		__resourceRoot = "";
	}
}
_mapapi_getResourceRoot();

var _mapapi_queryParam = null;
function _mapapi_readParam() {
	_mapapi_queryParam = [];
	var query = window.location.hash.split('?')[1];
	if ( !query || query.length === 0 ){
		query = window.location.search.substring(1);
	}
	if ( query ){

		// GR 09.02.2013 look for REST param with quotes ( ='...')
		// ! only one supported ----------------------------------

		var parms = query.split('\'');
		// if we have one '...'
		if ( parms.length == 3 ){
			// look for the key before that position
			var pos =  parms[0].length-1;
			if ( parms[0].charAt(pos) == '=' ){
				while ( (pos >= 0) &&
						(	(parms[0].charAt(pos) != '&')	&&
							(parms[0].charAt(pos) != '?'))	){
					pos--;
				}
				pos += 1;
				// ok, we have a key 
				if ( pos >= 0 ){
					// set key and param
					var key = parms[0].substring(pos,parms[0].length-1);
					var val = parms[1];
					_mapapi_queryParam[key] = val;
					// and recompose the rest of the query 
					query = parms[0].substr(0,pos) + parms[2];
				}
			}
		}
		// end GR 09.02.2013 --------------------------------------

		var parms = query.split('&');
		for (var i=0; i<parms.length; i++) {
			var pos = parms[i].indexOf('=');
			if (pos > 0) {
			  var key = parms[i].substring(0,pos);
			  var val = parms[i].substring(pos+1);
			  _mapapi_queryParam[key] = val;
			}
		}
	}
}

function _mapapi_getParam(){

	maptune.jsapi.szKML = null;
	maptune.jsapi.szData = null;
	maptune.jsapi.szFeed = null;
	maptune.jsapi.szTitle = null;
	maptune.jsapi.szType = null;
	maptune.jsapi.szFormat = null;
	maptune.jsapi.szFlag = null;
	maptune.jsapi.szGeoRSS = null;
	maptune.jsapi.szKMLName = null;
	maptune.jsapi.filterA = null;
	maptune.jsapi.szBookmark = null;
	maptune.jsapi.szLayerType = "Map";

	for ( var a in _mapapi_queryParam ){
		_mapapi_setParam(a,_mapapi_queryParam[a]);
	}
}

function _mapapi_setParam(szParam,szValue){

	switch ( szParam ) {
		case "mode":
			switch ( szValue ){
				case "info":
					__fShowInfoInList = true;
					break;	
				case "testall":
					__fShowInfoInList = true;
				case "testlinks":
					__fShowLinkInList = true;
					break;
				case "checklayer":
					maptune.jsapi.fCheckLayer = true;
					break;
				default:
					break;
			}
			break;

		case "filter":
			__szItemFilter = szValue;
			break;

		case "expanded":
			maptune.jsapi.fShowExpanded = szValue.match(/true/i)?true:false;
			break;

		case "feed":
			maptune.jsapi.szFeed = szValue;
			break;
		case "format":
			maptune.jsapi.szFormat = szValue;
			break;
		case "type":
			maptune.jsapi.szType = szValue;
			break;
		case "title":
			maptune.jsapi.szTitle = unescape(szValue);
			break;
		case "refresh":
			maptune.jsapi.szRefresh = szValue;
			break;
		case "flag":
			maptune.jsapi.szFlag = szValue;
			break;

		case "data":
			maptune.jsapi.szData = szValue;
			break;

		case "kml":
			maptune.jsapi.szKML = szValue;
			break;
		case "georss":
			maptune.jsapi.szGeoRSS = szValue;
			break;
		case "kmlname":
			maptune.jsapi.szKMLName = unescape(szValue);
			break;
		case "itemfilter":
			maptune.jsapi.filterA = maptune.jsapi.getFilterArray(unescape(szValue));
			break;
		case "bookmark":
			maptune.jsapi.szBookmark = szValue;
			break;

		default: 
			maptune.jsapi.setParam(szParam);
			break;
	}
}

maptune.jsapi.setParam = function(szParam) {
	if ( maptune.jsapi.mapParam && maptune.jsapi.mapParam.all ){
		maptune.jsapi.mapParam.all[szParam] = true;
	}
};

maptune.jsapi.isParam = function(szParam) {
	return ( maptune.jsapi.mapParam && maptune.jsapi.mapParam.all && maptune.jsapi.mapParam.all[szParam] );
};

maptune.jsapi.setLayerParam = function(paramObj) {
	this.mapParam.layers = this.mapParam.layers || [];
	this.mapParam.layers.push(paramObj);
};


/* ...................................................................* 
 *  wrapper for the GMap eventhandling                                * 
 * ...................................................................*/

 var __myApp = null;
 var __syncTimeout = null;

_mapapi_synchronize = function(app) {
	__myApp = app;
	if ( __syncTimeout ){
		clearTimeout(this.fixItemListTitlesTimer);
	}
	__syncTimeout = setTimeout("_mapapi_doSynchronize()",500);
};
_mapapi_doSynchronize = function() {
	__myApp.synchronize();
};
_mapapi_onInfoWindowClose = function(app) {
	app.onInfoWindowClose();
};

/* ...................................................................* 
 *  Map application					                                  * 
 * ...................................................................*/
  
maptune.jsapi.MapUp = function(szMapDiv,szItemlistDiv,szLegendDiv,szDirectionsDiv,szMapService){
	maptune.jsapi.szMapDiv = szMapDiv;
	maptune.jsapi.mapDiv = $("#"+szMapDiv+"")[0];
	return _mapapi_initialize_all(szMapDiv,szItemlistDiv,szLegendDiv,szDirectionsDiv,szMapService);
};

/**
 * Is called 'onload' to start creating the map
 */
function _mapapi_initialize_all(szMapDiv,szItemlistDiv,szLegendDiv,szDirectionsDiv,szMapService){

	_TRACE("_mapapi_initialize_all()");
	// read params from the query
	//_mapapi_readParam();
	//_mapapi_getParam();

	// create base map
	__map = _map_loadMap($("#"+szMapDiv+"")[0],szMapService);

	// create map application
	// ----------------------
	__mapUp = maptune.mapUp =  new maptune.MapUp(__map,$("#"+szMapDiv+"")[0],$("#"+szItemlistDiv+"")[0],$("#"+szLegendDiv+"")[0]);

	// create map listener for synchronizing
	// -------------------------------------
	_map_addEventListner(__map,"moveend",function() {_mapapi_synchronize(__mapUp);});
	_map_addEventListner(__map,"infowindowclose",_mapapi_onInfoWindowClose,__mapUp);

	// add directions service
	// ----------------------
	_map_addDirections(__map,$("#"+szDirectionsDiv+"")[0]);

	// add traffic service
	// ----------------------
	_map_addTrafficLayer(__map);

	// load the first layer
	// look if MapData has been loaded by 'dataloader.js' and contains a valid map object
	// if not, load layer from the start
	// ----------------------------------------------------------------------------------
	if ( (typeof(szMapDataLoaded) != "undefined") && szMapDataLoaded.length )
	{
		if ( typeof(MapData) == "undefined") {
			eval("var szType=typeof("+szMapDataLoaded+");");
			if ( szType == "object" ){
				eval("MapData="+szMapDataLoaded+";");
			}
		}
		if ( (typeof(MapData) == "object") && MapData.type && (MapData.type == "Map") ){
			__mapUp.addLayer(szMapDataLoaded,MapData);
		}else{
			maptune.jsapi.loadData(szMapDataLoaded,__szItemFilter);
		}
		maptune.jsapi.setDataCheckBox(szMapDataLoaded,true);
		__mapUp.setExtent("maximal");

		__mapUp.drawLayer();
		__mapUp.drawSidebar();

	}else{
		// no data preloaded, so try default data
		// --------------------------------------
		__mapUp.setExtent("world");

	}

	// set window resize handler
	// --------------------------------------
	$(window).resize(function() { try{ 
									maptune.jsapi.onWindowResize(null,false); 
									} catch (e){} 
	});


	// call reset on timeout to start the map display
	// ----------------------------------------------
	maptune.jsapi.reset();

	// inform user 
	// --------------------------------------
	try{
		maptune.onMapReady(__map);
	}
	catch (e){}

	return __mapUp;
}

/**
 * Is called 'onunload' to clear objects
 */
function _mapapi_unload_all(){
	if (__map){
		_map_unloadMap(__map);
	}
}

/**
 * Is called to set a new GeoJson data 
 */
function _mapapi_setNewData(szLayerDataName,mapData) {

	__mapUp.clearMap();
	__mapUp.layer.length = 0;

	maptune.jsapi.addNewData(szLayerDataName,mapData);

//	__mapUp.setExtent("maximal");
}


/* ...................................................................* 
 *  helper                                                            * 
 * ...................................................................*/ 
maptune.messageCount = 0;
maptune.message = function(szMessage,fFlag,code){

	var top  = (window.innerHeight/2);
	var left = (window.innerWidth/2);
	var gmapDiv = $("#map")[0];
	if (gmapDiv){
		left = gmapDiv.clientWidth/2;
		top  = gmapDiv.clientHeight/2;
	}
	var loadingDiv = $("#footerloading")[0];
	if ( 0 && loadingDiv ){
		loadingDiv.style.top = (top+10) + "px";
		loadingDiv.style.left = (left-100) + "px";
	}

	maptune.messageCount += ((fFlag==true)?1:-1);
	maptune.messageCount = Math.max(0,maptune.messageCount);

	var messageObj = $("#loading")[0];
	if ( messageObj ){
		messageObj.style.visibility = (maptune.messageCount>0?"visible":"hidden");
	}
};
maptune.errorMessage = function(szMessage,nTimeout){

	try	{
		MessageBox.show(MESSAGE_TYPE.Error, "MapTune", szMessage,
			function () {
				/** insert callback here **/
			}, null );

		// maptune.jsapi.messageBox(szMessage);
		if (nTimeout){
			setTimeout("MessageBox.close()",nTimeout);
		}
		return;
	}
	catch (e){}

	if ( !nTimeout ){
		nTimeout = 1000;
	}
	if ( $("#error-div")[0] ){
		$("#error-div").css("visibility","visible");
		$("#error-message").html(szMessage);
		setTimeout("$(\"#error-div\").css(\"visibility\",\"hidden\");$(\"#error-message\").html(\"\");",nTimeout);
	}
};
maptune.confirmMessage = function(szMessage,callback){

	try	{
		szMessage = szMessage.replace(/\n/g,"<br\>");
		MessageBox.show(MESSAGE_TYPE.Confirmation, "MapTune", szMessage,callback, null );
	} catch (e) {}

};
maptune.displayMessage = function(szMessage,nTimeout){

	try	{
		szMessage = szMessage.replace(/\n/g,"<br\>");
		MessageBox.show(MESSAGE_TYPE.Information, "MapTune", szMessage,null, null );
		if (nTimeout){
			setTimeout("MessageBox.close()",nTimeout);
		}
	} catch (e) {}

};
maptune.infoMessage = function(szMessage,nTimeout){

	try	{
		szMessage = szMessage.replace(/\n/g,"<br\>");
		MessageBox.show(MESSAGE_TYPE.Information, "MapTune", szMessage,null, null );
		if (nTimeout){
			setTimeout("MessageBox.close()",nTimeout);
		}
	} catch (e) {}
};	

maptune.lightBox = function(szMessage,nTimeout){

	try	{
		szMessage = szMessage.replace(/\n/g,"<br\>");
		MessageBox.show(MESSAGE_TYPE.Lightbox, "MapTune", szMessage,null, null );
		if (nTimeout){
			setTimeout("MessageBox.close()",nTimeout);
		}
	} catch (e) {}
};



/**
 * display full description of item as popup window
 * @param void
 * @return void
 */
maptune.jsapi.messageBox = function(szMessage) {

	if ( !$("#myPopupDiv")[0] ){
		alert(szMessage);
		return;
	}

	$("#myPopupDiv")[0].innerHTML = "";

	var divDescription = document.createElement("div");
	divDescription.setAttribute("id","myPopupDiv-content");
	divDescription.setAttribute("style","margin-top:30px;height:92%;overflow:auto;");
	divDescription.innerHTML = szMessage;
	$("#myPopupDiv")[0].appendChild(divDescription);

	var deleteButton = document.createElement("div");
	deleteButton.setAttribute("id","myPopupDiv-delete-button");
	var szHTML = "<a href=\"javascript:maptune.jsapi.closeMessageBox();\"><img src='resources/ui/delete.png' height='22' style=\"position:absolute;top:10px;right:10px;\" /></a>";
	deleteButton.innerHTML = szHTML;
	$("#myPopupDiv")[0].appendChild(deleteButton);

	var offset = $("#map").position();
	$("#myPopupDiv").css({
			position:	'absolute',
			top:		'50%',
			left:		'50%'
	}).css({
			marginLeft: '-'+($("#myPopupDiv").outerWidth()/2)+'px',
			marginTop:	'-'+($("#myPopupDiv").outerHeight()/2)+'px',
			background:	'#fff',
			padding:	'10px',
			visibility:	'visible'
	});

	$("#myPopupDivBG").css({
			visibility: 'visible',
			position:	'absolute',
			top:		offset.top+'px',
			left:		offset.left+'px',
			width:		$("#map").width(),
			height:		$("#map").height()
	});

	maptune.touchScroll("myPopupDiv");
	maptune.touchScroll("myPopupDiv-content");

};
maptune.jsapi.closeMessageBox = function() {
	$("#myPopupDiv").css("visibility","hidden");
	$("#myPopupDivBG").css("visibility","hidden");
};

function _mapapi_getMimeType(url){
	var mimeType = "audio/mpeg";
	var theExtension = url.substr(url.lastIndexOf('.')+1, 3); // truncates .aiff to aif
	if (theExtension.toLowerCase() == "wav") { mimeType = "audio/x-wav";}
	if (theExtension.toLowerCase() == "aif") { mimeType = "audio/x-aiff";} 
	if (theExtension.toLowerCase() == "wma") { mimeType = "audio/x-ms-wma";}
	if (theExtension.toLowerCase() == "mid") { mimeType = "audio/mid";}
	return mimeType;
}

/* ...................................................................* 
 *  exported functions                                                * 
 *																	  *	
 *  the real API                                                      * 
 * ...................................................................*/ 

/**
 * Is called to add a new GeoJson data 
 */
maptune.jsapi.addNewData = function(szLayerDataName,mapData) {

	this.setSearchFilter('');

	__mapUp.removeLayerBySourceName(szLayerDataName);

	if ( mapData ){
		__mapUp.addLayer(szLayerDataName,mapData);
	}
	else{
		// wrap layer data
		if ( typeof(szLayerDataName) == "string" ){
			eval("MapData="+szLayerDataName+";");
		}
		if ( typeof(MapData) == "undefined") {
			eval("MapData="+szMapDataLoaded+";");
		}

		__mapUp.addLayer(szLayerDataName,MapData);
	}

	if ( __fShowInfoInList || maptune.jsapi.fShowInfoInList ){
		var layerA = __mapUp.getAllLayerOfSource(szLayerDataName);
		for ( var i=0; i<layerA.length; i++ ){
			if ( typeof(layerA[i].data.fShowInfoInList) == "undefined" ){
				layerA[i].data.fShowInfoInList = (__fShowInfoInList || maptune.jsapi.fShowInfoInList);
			}
		}
	}

	__mapUp.clearLegend();
	__mapUp.redraw();


	// GR 12.11.2012 if first layer, set extent to layer !!
	if ( __mapUp.layer.length == 1 ){
		__mapUp.fSynchronized = false;
		__mapUp.setExtent("actual");
	}

};

/**
 * Is called to remove GeoJson data 
 */
maptune.jsapi.removeData = function(szLayerDataName,opt) {

	if ( !opt || !opt.confirm ){
		var szName = __mapUp.getAllLayerOfSource(szLayerDataName)[0].title || szLayerDataName;
		maptune.confirmMessage("Do yuo really want to delete<br>'"+szName+"' ?",function(){
			maptune.jsapi.removeData(szLayerDataName,{confirm:true});
		});
		return;
	}

	__mapUp.removeLayerBySourceName(szLayerDataName);

	__mapUp.clearLegend();
	__mapUp.redraw();

//	__mapUp.setExtent("maximal");

};
maptune.jsapi.getLayer = function(szSourceName,szName)
{
	return __mapUp.getLayer(szSourceName,szName);
};
maptune.jsapi.removeLayer = function(szLayer)
{
	__mapUp.removeLayer(szLayer);

	__mapUp.clearLegend();
	__mapUp.redraw();
};
maptune.jsapi.isLayer = function(szLayer)
{
	return __mapUp.isLayer(szLayer);
};
maptune.jsapi.isLayerOfSource = function(szSource)
{
	return __mapUp.isLayerOfSource(szSource);
};
/**
 * Is called to remove GeoJson data 
 */
maptune.jsapi.removeLayerOfSource = function(szSource) {

	__mapUp.removeLayerBySource(szSource);

	__mapUp.clearLegend();
	__mapUp.redraw();

};

/**
 * general redraw function
 */
maptune.jsapi.redraw = function() {
	if ( __mapUp ){
		__mapUp.redraw();
	}
};

/**
 * set item list clipping
 */
maptune.jsapi.setSidebarClipping = function(flag) {
	if ( __mapUp ){
		__mapUp.fClipSidebarToMapExtent = flag;
		__mapUp.redraw();
	}
};

/**
 * set item list autoscroll
 */
maptune.jsapi.setSidebarAutoScroll = function(flag) {
	if ( __mapUp ){
		__mapUp.fAutoScrollSidebar = flag;
	}
};

/**
 * set item list tooltips
 */
maptune.jsapi.setSidebarTooltips = function(flag,autopan) {
	if ( __mapUp  ){
		__mapUp.fSidebarTooltips = flag;
		__mapUp.fSidebarTooltipsAutoPan = autopan;
	}
};

/**
 * set item list autoscroll
 */
maptune.jsapi.setListStateButtons = function(flag) {
	if ( __mapUp  ){
		__mapUp.fUseListStateButtons = flag;
	}
};

/**
 * position the actual sidbar item title to the top
 */
maptune.jsapi.fixItemListTitles = function() {
	if ( this.fixItemListTitlesTimer ){
		clearTimeout(this.fixItemListTitlesTimer);
	}
	this.fixItemListTitlesTimer = setTimeout("maptune.jsapi.doFixItemListTitles()",250);
};
maptune.jsapi.doFixItemListTitles = function() {
	__mapUp.fixItemListTitles();
};


/**
 * redraw with search filter from HTML form
 */
maptune.jsapi.search = function(szLayer,szValue) {
	if ( maptune.jsapi.searchDelayTimeout ){
		clearTimeout(maptune.jsapi.searchDelayTimeout);		
	}
	if ( (typeof(szLayer) != "undefined") && (typeof(szValue) != "undefined") ){
		maptune.jsapi.searchDelayTimeout = setTimeout("maptune.jsapi.searchDelay('"+szLayer+"','"+szValue+"')",500);
	}else{
		maptune.jsapi.searchDelayTimeout = setTimeout("maptune.jsapi.searchDelay()",500);
	}
};

/**
 * delayed redraw with search filter from HTML form
 */
maptune.jsapi.searchDelay = function(szLayer,szValue) {
	if ( szLayer ){
		__mapUp.szSearchStringA[String(szLayer)] = szValue;
	}else{
		__mapUp.szSearchString = $("#IndicatorFilterFormQuery").val();
		if ( !__mapUp.szSearchString || (typeof(__mapUp.szSearchString) == "undefined" ))	{
			__mapUp.szSearchString = $("#IndicatorFilterForm > input").val();
		}
	}
	__mapUp.redraw();
};

/**
 * redraw with search filter given as parameter
 */
maptune.jsapi.getFilterArray = function(szString) {
	return __getStyleArray(szString);
};
/**
 * transform a style string: name:value;name:value ... into a named array
 * @param szStyle the style string
 * @return an object of the kind: object.name = value
 */
function __getStyleArray(szStyle){
	if ( szStyle == null || szStyle.length < 2 ){
		return null;
	}
	try{
		var styleA = new Array(0);
		var szPartsA = szStyle.split(';');
		for ( var i=0;i<szPartsA.length;i++ ){
			if (szPartsA[i].length){
				var szPartA = szPartsA[i].split(':');
				styleA[szPartA[0]] = szPartA[1];
			}
		}
		return styleA;
	}
	catch (e){
		alert("ERROR parsing: "+szStyle);
	}
	return null;
}

/**
 * redraw with search filter given as parameter
 */
maptune.jsapi.setSearchFilter = function(szString) {
	$("#IndicatorFilterForm > input").val(szString);
	$("#IndicatorFilterFormQuery").val(szString);
	__mapUp.szSearchString = szString;
	__mapUp.redraw();
};

/**
 * redraw with exclude filter given as parameter
 */
maptune.jsapi.setExcludeFilter = function(szString) {
	__mapUp.szExcludeString = szString;
};

/**
 * set layer type to display
 */
maptune.jsapi.setLayerType = function(szString) {
	this.szLayerType = szString; 
	__mapUp.redraw();
};
/**
 * toggle layer type to display
 */
maptune.jsapi.toggleLayerType = function(szString) {
	this.szLayerType = ((this.szLayerType==szString)?"Map":szString); 
	__mapUp.redraw();
	return (this.szLayerType == szString); 
};


maptune.jsapi.setMarkerStyle = function(szStyle)
{
	var layersP = maptune.jsapi.mapParam.layers;
	for ( var i=0; i<layersP.length; i++ ){
		if ( layersP[i].markerType ){
			layersP[i].markerType = szStyle;
		}
	}
	__mapUp.clearMap();
	__mapUp.redraw();
};


var __setListContent = function(layer,szLayerName,szListContent){

	switch ( szListContent ){
		case "info" : 
			layer.fShowInfoInList = true; 
			layer.properties.fGallery = false; 
			__fShowLinkInList = false; 
			break;
		case "link" : 
			__fShowLinkInList = true;
			if ( szLayerName ){
				layer.fShowInfoInList = true; 
			}
			for ( var i=0; i<__mapUp.layer.length; i++ ){
				__mapUp.layer[i].data.fShowInfoInList = true;
			}
			break;
		case "gallery" : 
			layer.fShowInfoInList = false; 
			layer.properties.fGallery = true; 
			__fShowLinkInList = false; 
			break;
		case "none" : 
			layer.fShowInfoInList = false; 
			layer.properties.fGallery = false; 
			__fShowLinkInList = false; 
			break;
		case "show" :
			layer.fOverrideScaleDependency = false;
			layer.legend = "expanded";
			__fShowLinkInList = false; 
			break;
		case "showall" :
			layer.sourcelegend = "expanded";
			__fShowLinkInList = false; 
			break;
		case "hide" : 
			layer.fOverrideScaleDependency = false;
			layer.legend = "collapsed";
			layer.fShowAll = false;
			__fShowLinkInList = false; 
			break;
		case "hideall" : 
			layer.sourcelegend = "collapsed";
			__fShowLinkInList = false; 
			break;
		case "piu" :
			layer.fShowAll = true;
//			maptune.jsapi.zoomToLayer(layer.name);
			break;
		case "extent" :
			layer.fShowAll = true;
			maptune.jsapi.zoomToLayer(layer.name);
			break;
		case "clip" :
			layer.fShowAll = false;
			break;
		case "overridescaledependency" :
			layer.fOverrideScaleDependency = true;
			break;
	}
};

maptune.jsapi.setListContent = function(szLayerName,szListContent)
{
	var layer = null;
	if ( szLayerName ){
		for ( var i=0; i<__mapUp.layer.length; i++ ){
			if ( __decode_utf8(__mapUp.layer[i].name) == __decode_utf8(szLayerName) ){
				layer = __mapUp.layer[i].data;
				__setListContent(layer,szLayerName,szListContent);
			}
		}
		if ( layer == null ){
			for ( var i=0; i<__mapUp.layer.length; i++ ){
				if ( __decode_utf8(__mapUp.layer[i].source) == __decode_utf8(szLayerName) ){
					layer = __mapUp.layer[i].data;
					__setListContent(layer,szLayerName,szListContent);
				}
			}
		}
	}else{
		__mapUp.szListContent = szListContent;
		for ( var i=0; i<__mapUp.layer.length; i++ ){
			layer = __mapUp.layer[i].data;
			__setListContent(layer,__mapUp.layer[i].name,szListContent);
		}
	}
	if ( layer == null ){
		return;
	}
	__mapUp.synchronize();
	return;
	//layer.fShowAll = false; 

	// GR 02.02.2012 needed to scroll the itemlist to the layer
	__mapUp.itemListLayer = layer;
	__mapUp.saveSidebarScroll();

	__mapUp.clearLegend();
	if ( !this.fCheckLayer && !(layer.properties.legendstyle && layer.properties.legendstyle.match(/CHECKSUBLAYER/))){
		this.setMapContent(szLayerName,szListContent);
	}
	__mapUp.clearMap();
	__mapUp.redraw();

};

var __setMapContent = function(layer,szMapContent){

	layer.visibility = "1"; 

	switch ( szMapContent ){
		case "show" : 
			layer.properties.visibility = "1"; 
			break;
		case "hide" : 
			layer.properties.visibility = "0"; 
			break;
	}

}
maptune.jsapi.setMapContent = function(szLayerName,szMapContent)
{
	var layer = null;
	if ( szLayerName ){
		for ( var i=0; i<__mapUp.layer.length; i++ ){
			if ( __decode_utf8(__mapUp.layer[i].name) == __decode_utf8(szLayerName) ){
				__setMapContent(__mapUp.layer[i].data,szMapContent);
			}
		}
	}else{
		for ( var i=0; i<__mapUp.layer.length; i++ ){
			__setMapContent(__mapUp.layer[i].data,szMapContent);
		}
	}

	__mapUp.redraw();
};

maptune.jsapi.loadDefaultMap = function() {


		if ( (typeof(maptune.jsapi.mapParam) == "object") && maptune.jsapi.mapParam.defaultmap && maptune.jsapi.mapParam.defaultmap.data ){
			this.loadData(maptune.jsapi.mapParam.defaultmap.data,null,"add");
		}
		if ( (typeof(maptune.jsapi.mapParam) == "object") && maptune.jsapi.mapParam.defaultmap && maptune.jsapi.mapParam.defaultmap.feed ){
			this.addFeedLayer_YQL(maptune.jsapi.mapParam.defaultmap.feed.url,'GeoRSS','xml',maptune.jsapi.mapParam.defaultmap.feed.mode);
		}
};

maptune.jsapi.reset = function() {

	if ( maptune.jsapi.resetTimeout ){
		clearTimeout(maptune.jsapi.resetTimeout);		
	}
	maptune.jsapi.resetTimeout = setTimeout("maptune.jsapi.doreset()",100);
};

maptune.jsapi.doreset = function() {

	this.checkResize();

	__mapUp.clearMap();
	__mapUp.layer.length = 0;


	_mapapi_readParam();
	_mapapi_getParam();

	
	this.closeFullDescription();
	this.loadDefaultMap();


	this.getHashFeed();
	this.setSearchFilter('');
	this.setExcludeFilter('');

	__mapUp.setExtent("maximal");

	_mapup_get_collected_items();

};

maptune.jsapi.clear = function() {

	if ( maptune.jsapi.clearTimeout ){
		clearTimeout(maptune.jsapi.clearTimeout);		
	}
	maptune.jsapi.clearTimeout = setTimeout("maptune.jsapi.doclear()",10);
};

maptune.jsapi.doclear = function() {

	__mapUp.clearMap();
	__mapUp.layer.length = 0;

	this.closeFullDescription();
	try{
		$("#statusline")[0].innerHTML = "";
	} catch (e) {}

	__mapUp.setExtent("maximal");
};

// use yahoo YQL webservice as proxy to get around origin problems
// ----------------------------------------------------------------
maptune.jsapi.addFeedLayer_YQL = function(szLayer,szName,szType,szFlag,szTitle,opt) {
	var szUrl  = "http:\/\/query.yahooapis.com\/v1\/public\/yql?q=select%20*%20from%20xml%20where%20url%3D";
		szUrl += "'"+encodeURIComponent(szLayer)+"'";
		szUrl += szName.match(/GeoRSS/)?"&format=rss&diagnostics=true":"&format=json&diagnostics=true";
	maptune.feed.addFeed(szUrl,{"type":szName,"format":szType,"flag":szFlag,'title':szTitle,'proxy':true,'opt':opt});
};
// new ---- in dev
// ----------------------------------------------------------------
maptune.jsapi.addFeed = function(szUrl,opt,callback) {
	maptune.feed.addFeed(szUrl,{"type":opt.type,"format":opt.format,"flag":opt.flag,'title':opt.title||opt.name,'proxy':opt.proxy,'opt':opt},callback);
};

// GR 17.05.2012 must bee done more elegant !
maptune.jsapi.getHashFeed = function() {

	if ( (typeof(szMapDataLoaded) != "undefined") && szMapDataLoaded.length ){
		if ( (typeof(MapData) == "object") && MapData.type && (MapData.type == "Map") ){
			__mapUp.addLayer(szMapDataLoaded,MapData);
		}else{
			maptune.jsapi.loadData(szMapDataLoaded,__szItemFilter,"add|zoomto");
		}
	}
	if ( maptune.jsapi.szData ){
		if ( maptune.jsapi.szFlag && maptune.jsapi.szFlag.match(/zoomto/) ){
			maptune.jsapi.addDataAndZoomTo(maptune.jsapi.szTitle,maptune.jsapi.szFilter,maptune.jsapi.szData);
		}else{
			maptune.jsapi.addData(maptune.jsapi.szTitle,maptune.jsapi.szFilter,maptune.jsapi.szData);
		}
	}
	if ( maptune.jsapi.szKML ){
		var szUrl  = decodeURIComponent(maptune.jsapi.szKML);
		maptune.jsapi.addFeed(szUrl,{"type":'kml',"format":'xml',"flag":'zoomto','title':maptune.jsapi.szKMLName});
	}
	if ( maptune.jsapi.szGeoRSS ){
		var szUrl  = "http:\/\/query.yahooapis.com\/v1\/public\/yql?q=select%20*%20from%20xml%20where%20url%3D";
		szUrl += "'"+maptune.jsapi.szGoeRss+"'";
		szUrl += "&format=rss&diagnostics=true";
		maptune.feed.addFeed(szUrl,{"type":'GeoRSS',"format":'xml',"flag":'zoomto'});
	}
	if ( maptune.jsapi.szFeed && maptune.jsapi.szType && maptune.jsapi.szFormat && maptune.jsapi.szTitle ){
		maptune.jsapi.addFeed(maptune.jsapi.szFeed,{"type":maptune.jsapi.szType,"format":maptune.jsapi.szFormat,"title":maptune.jsapi.szTitle,"flag":'zoomto',"refresh":maptune.jsapi.szRefresh});
	}
	if ( maptune.jsapi.szBookmark ){
		$.getScript("./"+maptune.jsapi.szBookmark+".js").fail(function() { alert("error loading: "+maptune.jsapi.szBookmark+".js"); });
	}

};

maptune.jsapi.__prozessLoadedData = function(obj,szLayer,szFilter,szFlag,szSource)
{
	_TRACE(szLayer+" loaded");

	// GR 15.10.2012 
	obj.szSourceUrl = szSource;
	__mapUp.szItemFilter = (typeof(szFilter)!="undefined")?szFilter:null;
	if ( szFlag && szFlag.match(/add/)){
		maptune.jsapi.addNewData(szLayer,obj);
	}else{
		_mapapi_setNewData(szLayer,obj);
	}
	maptune.jsapi.showTooltips(__fShowTooltips);
	maptune.jsapi.setDataCheckBox(szLayer,true);
	__mapUp.szItemFilter = null;
	if ( !maptune.jsapi.onFocus || (szFlag && szFlag.match(/zoomto/)) ){
		setTimeout("maptune.jsapi.zoomToLayer('"+szLayer+"')",1000);
	}
	if ( szFlag && szFlag.match(/extent/) ){
		maptune.jsapi.zoomToLayerExtent(szLayer);
	}
	if ( szFlag && szFlag.match(/showinfo/) ){
		maptune.jsapi.setListContent(szLayer,"info");
	}
	if ( szFlag && szFlag.match(/collapsed/) ){
		maptune.jsapi.setListContent(szLayer,"hideall");
	}
};

maptune.jsapi.__loadData = function(szLayer,szFilter,szFlag,szSource,szFallBackSource)
{
	if ( !szSource ){
		return;
	}

	if ( 1 || szSource.match(/http:/i) ){
		maptune.jsapi.__loadDataP(szLayer,szFilter,szFlag,szSource,szFallBackSource);
		return;
	}

	maptune.message("loading",true);
	$.get(szSource,
		function(data){
			maptune.message("loading",false,"x1");
			var obj = false;
			if ( typeof(data) == "object" ){
				obj = data;
			}else{
				try {
					obj = $.parseJSON(data);
				} catch (e) {
					alert(e);
					if ( data.substr(0,3) == "var" ){
						eval(data);
						eval("obj = "+szLayer+";");
					}else{
						eval("obj = "+data+";");
					}
				}
			}
 			maptune.jsapi.__prozessLoadedData(obj,szLayer,szFilter,szFlag,szSource);

       },"json").error(function() { maptune.message("loading",false,"x2");
									 if(szFallBackSource){
										 maptune.jsapi.__loadData(szLayer,szFilter,szFlag,szFallBackSource);
									 }else{
										 maptune.errorMessage("error loading: "+szLayer);
									 }
	});
};
maptune.jsapi.__loadDataP = function(szLayer,szFilter,szFlag,szSource,szFallBackSource)
{
	if ( !szSource ){
		return;
	}

	// GR note: error handling is not working on 404 file not found
	// tried many types of jquery error handling; leve this for TBD memory
	$.ajaxSetup({
        error: function(jqXHR, exception) {

            if (jqXHR.status === 0) {
                maptune.errorMessage('Not connect.\n Verify Network.');
				/**	
            } else if (jqXHR.status == 404) {
                maptune.errorMessage('Requested page not found. [404]');
				**/
            } else if (jqXHR.status == 500) {
                maptune.errorMessage('Internal Server Error [500].');
				/**
            } else if (exception === 'parsererror') {
                alert('Requested JSON parse failed.');
				**/
            } else if (exception === 'timeout') {
                maptune.errorMessage('Time out error.');
            } else if (exception === 'abort') {
                maptune.errorMessage('Ajax request aborted.');
				/**
            } else {
                alert('Uncaught Error.\n' + jqXHR.responseText);
				**/
            }
        }
    });

	maptune.message("loading",true,"x3->"+szSource);
	maptune.fJsonP = false;
	$.get(szSource,
		function(data){
        },"script").success(function() {
					console.log("loaded");
					if ( !maptune.fJsonP ){
						maptune.errorMessage('jsonp error with:'+'"+szSource+"<br>\"ixmaps.jsapi.import\" not defined');
						maptune.message("loading",false,"x34");
					}
					})
				  .fail(function() {
					maptune.errorMessage('loading error with:'+szSource);
					maptune.message("loading",false,"x34");
					})
				  .error(function() {
					maptune.errorMessage('loading error with:'+szSource);
					maptune.message("loading",false,"x34");
					})
		maptune.jsapi.import = ixmaps.jsapi.import = function(data){
		maptune.fJsonP = true;
		maptune.message("loading",false,"x34");
		var obj = false;
		if ( typeof(data) == "object" ){
			obj = data;
		}else{
			try {
				obj = $.parseJSON(data);
			} catch (e) {
				alert("oooiiii: "+e);
				if ( data.substr(0,3) == "var" ){
					eval(data);
					eval("obj = "+szLayer+";");
				}else{
					eval("obj = "+data+";");
				}
			}
		}
		maptune.jsapi.__prozessLoadedData(obj,obj.title||obj.name,szFilter,szFlag,szSource);
	};
};

maptune.jsapi.loadData = function(szLayer,szFilter,szFlag,szSource)
{
	if ( szSource ){
		maptune.jsapi.__loadData(szLayer,szFilter,szFlag,szSource);
	}else{
		maptune.jsapi.__loadData(szLayer,szFilter,szFlag ,"./data/gz/" + szLayer + ".js.gz"
														,"./data/" + szLayer + ".js");
	}
};
maptune.jsapi.addData = function(szLayer,szFilter,szSource)
{
	this.loadData(szLayer,szFilter,"add",szSource);
	return;
};
maptune.jsapi.addDataAndZoomTo = function(szLayer,szFilter,szSource)
{
	this.loadData(szLayer,szFilter,"add|zoomto",szSource);
	return;
};
maptune.jsapi.toggleData = function(szLayer,szSource){

	var target = $("#"+szLayer)[0];
	if ( !target ){
		target = this.event.srcElement ? this.event.srcElement : this.event.target;
	}	
	if ( target && target.checked ){
		__mapUp.szItemFilter = null;	
		maptune.jsapi.addData(szLayer,null,szSource);
	}
	else{
		maptune.jsapi.removeData(szLayer);
	}
};
maptune.jsapi.setDataCheckBox = function(szLayer,value){

	var target = $("#"+szLayer)[0];
	if ( target ){
		target.checked = value;
	}	
};
maptune.jsapi.showTooltips = function(fShow){
	__fShowTooltips = fShow;
	if ( __fShowTooltips && (__mapUp.actualMapZoom > 15) ){
		__mapUp.showTooltips(true);
	}else{
		__mapUp.showTooltips(false);
	}
};
maptune.jsapi.setTimeScope = function(szScope){
	__mapUp.setTimeScope(szScope);
};
maptune.jsapi.onChangeTimeWindow = function(szFlag,nDays){
	/* dummy */
};

maptune.jsapi.toggleServiceLayer = function(szServiceUrl){

	var target = $("#"+szServiceUrl)[0];
	if ( !target ){
		target = this.event.srcElement ? this.event.srcElement : this.event.target;
	}	
	if ( target && target.checked ){
		__mapUp.loadServiceLayer(szServiceUrl);
	}
	else{
		__mapUp.removeServiceLayer(szServiceUrl);
	}
};
maptune.jsapi.loadServiceLayer = function(szServiceUrl){
	__mapUp.loadServiceLayer(szServiceUrl);
};
maptune.jsapi.setDirections = function(fromAddress, toAddress, toHidden, locale){
	_map_setDirections(__map,fromAddress, toAddress, toHidden, locale);
};
maptune.jsapi.killaudio = function(url){
	var div = $("#audioplayer")[0];
	if ( div.hasChildNodes() )	{
		while ( div.childNodes.length >= 1 ) {
			div.removeChild( div.firstChild );       
		} 
	}	
};
maptune.jsapi.playaudio = function(url){

	var div = $("#audioplayer")[0];
	if ( div.hasChildNodes() )	{
		while ( div.childNodes.length >= 1 ) {
			div.removeChild( div.firstChild );       
		} 
	}

	// Get the MIME type of the audio file from its extension (for non-Windows browsers)
	var mimeType = "audio/mpeg"; // assume MP3/M3U
	var objTypeTag = "application/x-mplayer2"; // The Windows MIME type to load the WMP plug-in in Firefox, etc.

	mimeType = _mapapi_getMimeType(url);

	var object = document.createElement('object');
	object.setAttribute("type",objTypeTag); 
	
	var embed = document.createElement('embed');
	embed.setAttribute("src",maptune.jsapi.getResourceUrl(url));
	embed.setAttribute("width","200");
	embed.setAttribute("height","16"); 
	embed.setAttribute("type",mimeType); 
	embed.setAttribute("autostart","true"); 
	div.appendChild(embed);
	embed = document.createElement('text');
	embed.innerHTML += "&nbsp; <a  style=\"text-decoration: none\" href=\"javascript:maptune.jsapi.killaudio()\" title='stop' >[x]</a>";
	div.appendChild(embed);
	
};
maptune.jsapi.getEmbedAudioHTML = function(url,width){
	var szHTML="";
	szHTML += "<audio id='audiox' src='"+url+"' controls></audio>";
	return szHTML;
};
maptune.jsapi.setEmbedAudioInInfo = function(state) {
	fEmbedAudioInInfo = state;
};
/**
 * see if has relative URL, if yes, make abslute using root from given szUrl
 * @param szRel the string that might contain image resource definitions
 * @param szUrl  the 'root' URL to resolve the relative url
 * @return ---
 */
maptune.jsapi.resolveRelativeUrl = function(szRel,szUrl) {
	if ( szUrl && szRel && !szRel.match(/http:/i) && !szRel.match(/https:/i) ){
		return this.getUrlRoot(szUrl) + szRel;
	}else{
		return szRel;
	}
};
/**
 * gets the root of any url
 */
maptune.jsapi.getUrlRoot = function(szUrl){
	var rootA = szUrl.split('/');
	rootA.pop();
	return rootA.join('/') + '/';
};


/**
 * display full description of item as popup window
 * @param void
 * @return void
 */
maptune.jsapi.popupFullDescription = function() {

	$("#myPopup")[0].innerHTML = "";

	var divDescription = document.createElement("div");
	divDescription.setAttribute("id","myPopupDiv-content");
	divDescription.innerHTML = maptune.jsapi.szInfoWindowFullDescription;
	$("#myPopup")[0].appendChild(divDescription);

	var deleteButton = document.createElement("div");
	deleteButton.setAttribute("id","myPopupDiv-delete-button");
	var szHTML = "<a href=\"javascript:maptune.jsapi.closeFullDescription();\"><img src='resources/ui/delete.png'\" /></a>";
	deleteButton.innerHTML = szHTML;
	$("#myPopup")[0].appendChild(deleteButton);

	var offset = $("#map").position();
	$("#myPopupDiv").css("position","absolute");
	$("#myPopupDiv").css("top",offset.top+"px");
	$("#myPopupDiv").css("left",offset.left+"px");
	$("#myPopupDiv").css("visibility","visible");
	$("#myPopupDiv").css("width",$("#"+maptune.jsapi.szMapDiv).width())+"px";
	$("#myPopupDiv").css("height",$("#"+maptune.jsapi.szMapDiv).height())+"px";

	$("#myPopupDivBG").css("visibility","visible");
	$("#myPopupDivBG").css("position","absolute");
	$("#myPopupDivBG").css("top",offset.top+"px");
	$("#myPopupDivBG").css("left",offset.left+"px");
	$("#myPopupDivBG").css("width",$("#"+maptune.jsapi.szMapDiv).width(+"px"));
	$("#myPopupDivBG").css("height",$("#"+maptune.jsapi.szMapDiv).height()+"px");

	maptune.touchScroll("myPopup");
	maptune.touchScroll("myPopupDiv-content");

	// $( "#myPopupDiv" ).popup();
	// $( "#myPopupDiv" ).popup( "open" );

	$(".leaflet-popup-close-button").click()
	__mapUp.closeActualInfoWindow(maptune.jsapi.infoWindowMarker);
};
maptune.jsapi.closeFullDescription = function() {
	$("#myPopupDiv").css("visibility","hidden");
	$("#myPopupDivBG").css("visibility","hidden");
};

_fZoomToSmooth = false;
// wrapper for timeout to pass __map
maptune.jsapi.setCenterAndZoom = function(center,zoom){
	_map_setCenterAndZoom(__map,center,zoom);
};
maptune.jsapi.setZoom = function(zoom){
	_map_setZoom(__map,zoom);
};
maptune.jsapi.panTo = function(lat,lon){
	_map_setCenter(__map,new GLatLng(lat,lon));
	_mapapi_synchronize(__mapUp);
};
maptune.jsapi.zoomTo = function(lat,lon){

	var nZoomToLevel = Math.max(_map_getZoom(__map),16);

	if (!_fZoomToSmooth ){
		// normal case
		_map_setZoom(__map,nZoomToLevel);
		_map_setCenter(__map,new GLatLng(lat,lon));

	}else{
		var nZoom = _map_getZoom(__map);
		var nTimeOutStep = 250;
		var nTimeOut = nTimeOutStep;
		while ( nZoom < nZoomToLevel ){
			setTimeout("maptune.jsapi.setCenterAndZoom(new GLatLng("+lat+","+lon+"),"+(++nZoom)+");",nTimeOut);
			nTimeOut += nTimeOutStep;
		}
		while ( nZoom > nZoomToLevel ){
			setTimeout("maptune.jsapi.setCenterAndZoom(new GLatLng("+lat+","+lon+"),"+(--nZoom)+");",nTimeOut);
			nTimeOut += nTimeOutStep;
		}
	}
	return;
};
maptune.jsapi.zoomTo_step = function(lat,lon){
	_map_setCenter(__map,new GLatLng(lat,lon));
	var nZoom = _map_getZoom(__map);
	_map_setCenterAndZoom(__map,new GLatLng(lat,lon),++nZoom);
};
maptune.jsapi.zoomToLayer = function(szName){
	this.onFocus = true;
	__mapUp.fSynchronized = false;
	if ( szName && szName.length ){
		__mapUp.setExtent("tolayer",szName);
	}else{
		__mapUp.setExtent("maximal");
	}
};
maptune.jsapi.zoomToLayerExtent = function(szName){
	this.onFocus = true;
	__mapUp.fSynchronized = false;
	if ( szName && szName.length ){
		__mapUp.setExtent("tolayer|extent",szName);
	}
};
maptune.jsapi.changeZoom = function(nDelta){
	__mapUp.fSynchronized = false;
	__mapUp.changeZoom(nDelta);
};
maptune.jsapi.changeZoomToScale = function(nScale){
	__mapUp.fSynchronized = false;
	__mapUp.changeZoomToScale(nScale);
};
maptune.jsapi.myPosition = function(){
	if (navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(
			function(position) {
			_map_setCenterAndZoom(__map,new GLatLng(position.coords.latitude,position.coords.longitude),15);
			}, 
			function(error){
				switch(error.code){
					case error.PERMISSION_DENIED:
					  x.innerHTML="User denied the request for Geolocation."
					  break;
					case error.POSITION_UNAVAILABLE:
					  x.innerHTML="Location information is unavailable."
					  break;
					case error.TIMEOUT:
					  x.innerHTML="The request to get user location timed out."
					  break;
					case error.UNKNOWN_ERROR:
					  x.innerHTML="An unknown error occurred."
					  break;
				}
			}
		);
	}else{
		alert("geo location is not supported on your browser !");
	}
};
maptune.jsapi.fixMarkerClipping = function(){
	__mapUp.fFixMarkerClipping = true;
};

maptune.jsapi.checkResize = function(){
	var width  =  $("#"+maptune.jsapi.szMapDiv+"").width();
	var height =  $("#"+maptune.jsapi.szMapDiv+"").height();
	__mapUp.checkResize(width,height);
};

maptune.jsapi.openlink = function(url){

	if ( !url.match(/http:\\/) ){
		url = "http:\\\\" + url;
	}
	window.open(url,url);
};

maptune.jsapi.getResourceUrl = function(url){
	if ( url ){
		return (url.match(/http:/i) || url.match(/https:/i))?url:__resourceRoot+url;
	}
	return url;
};

maptune.jsapi.playTimeline = function(szName,option){
	__mapUp.playTimelineOfLayer("start",szName,option);
};

maptune.jsapi.setMapType = function(szType){
	__mapUp.setMapType(szType);
};

maptune.jsapi.setMapTilt = function(nTilt){
	__mapUp.setMapTilt(nTilt);
};

maptune.jsapi.rotateMap = function(nRotate){
	__mapUp.rotateMap(nRotate);
};

maptune.jsapi.getMapHandle = function(){
	return __mapUp.map;
};


/* ...................................................................* 
 *  onload / unload                                                   * 
 * ...................................................................*/ 

window.onunload = _mapapi_unload_all; 


/**
 * end of namespace
 */

})();

// -----------------------------
// EOF
// -----------------------------
